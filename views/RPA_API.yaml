swagger: '2.0'
info:
  version: '1.0.0'
  title: RPA API
  description: This API presents an authenticated interface to invoke bot scripts both synchronously and asynchronously.  Authentication is enforced through Basic Auth (username/password).  Authentication is managed through a nodejs server script which has to be deployed in the DMZ. On invocation of the API, the server script checks the credentials against a LDAP database and if authenticated, forwards on the request to the specified RPA computer behind a firewall. The API has a loopback setting to simulate an RPA bot when an RPA environment is not available.
    ![Architecture](https://rpapi.eu-gb.mybluemix.net/Architecture.png)


    Examples and labs-
    <br><br>[Presentation](/RPAWithAppConnect.pdf)
    <br>[Lab Guide](/labguide.pdf)
    <br>[Video](https://youtu.be/_BL6wobZlJ8)
    <br>[IBM RPA Agent API](https://www.ibm.com/docs/en/rpa/21.0?topic=bot-starting-bots-by-api-call)
    <br>[Git Repo](https://github.com/ncrowther/rpa-secure-gateway.git)
  contact:
    email: ncrowther@uk.ibm.com
host: rpapi.eu-gb.mybluemix.net
basePath: /
schemes:
- https
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  basicAuth:
    type: basic
# Apply Basic auth to the whole API:
security:
  - basicAuth: []
paths:
  /runsync:
    post:
      description: Synchronously runs a script on a RPA agent specified in the URL.  All requests are authenticated using Basic Auth.
      summary: script
      tags:
      - RPA API
      operationId: runSyncScript
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: script
        in: query
        required: true
        type: string
        description: Bot script name to run.  This script must be published on the tenant belonging to the host
      - name: rpaAgentUrl
        in: query
        required: true
        type: string
        description: URL of the RPA agent. If set to LOOPBACK then 202 always returned to simulate a succesful bot run.  If a URL, it must point to an RPA agent.  It can point to either port 8099 (Direct) or 8096 (Broker). Script parameters are passed in the request body.  See documentation https://www.ibm.com/docs/en/rpa/20.12?topic=bot-starting-bots-by-api-ca for more details
      - name: unlockMachine
        in: query
        required: true
        type: string
        description: True if unlock False otherwise
      - $ref: '#/parameters/RequestBody'
      responses:
        '200':
          description: "OK"
          schema:
            title: SuccessResponse
            type: object
            description: OK
            properties:
              out_code:
                type: integer
                format: int32
                description: zero for success, negative for failure
                example: 0
              out_type:
                type: string
                description: Type of response. Either SUCCESS or FAIL
                example: SUCCESS
              out_message:
                type: string
                description: Description of response
                example: OK
        '400':
          description: "Bad Request"
        '404':
          description: "Not Found"

  /runasync:
    post:
      description: Asynchronously runs a script on a RPA agent (host) specified in the URL.  All requests are authenticated using Basic Auth.  This API must be invoked twice.  The initial call is with mode INVOKE to invoke the bot.  A request ID is returned in out_message.   This request ID is passed into the second invocation with mode RETRIEVE to fetch the results asynchronously.  Node that if the bot has not finished running the result returned from RETRIEVE will be PENDING.
      summary: script
      tags:
      - RPA API
      operationId: runAsyncScript
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: mode
        in: query
        required: true
        type: string
        description: Must be one of INVOKE or RETRIEVE
      - name: script
        in: query
        required: true
        type: string
        description: Bot script name to run.  This script must be published on the rpaAgentUrl
      - name: rpaAgentUrl
        in: query
        required: true
        type: string
        description: URL of the RPA agent. If set to LOOPBACK then 202 always returned to simulate a succesful bot run.  If a URL, it must point to an RPA agent.  It can point to either port 8099 (Direct) or 8096 (Broker). Script parameters are passed in the request body.  See documentation https://www.ibm.com/docs/en/rpa/20.12?topic=bot-starting-bots-by-api-ca for more details
      - name: unlockMachine
        in: query
        required: true
        type: string
        description: True if unlock False otherwise
      - $ref: '#/parameters/RequestBody'
      responses:
        '200':
          description: "OK"
        '202':
          description: Accepted asynch request
          schema:
            title: AsyncSuccessResponse
            type: object
            properties:
              out_code:
                type: integer
                format: int32
                description: zero for success, negative for failure
                example: 0
              out_type:
                type: string
                description: Type of response.
                example: PENDING
              out_message:
                type: string
                description: Contains request ID to be used to fetch response in mode=RETRIEVE
                example: 836086af-a4fd-43a0-bc6c-3904e718e541
        '400':
          description: "Bad Request"
        '404':
          description: "Not Found"
parameters:
  RequestBody:
    name: RequestBody
    in: body
    description: Default
    required: true
    schema:
      $ref: '#/definitions/RequestBodySchema'

definitions:

  RequestBodySchema:
    description: Script Parameters
    example: "{\n\tinputParameterName: inputParameterValue\n}"
    type: object

tags:
- name: IBM RPA API
  description: Synchronous or asynchronous execution of an RPA script.
  externalDocs:
    url: http://localhost:8080/docs
    description: Find out more
externalDocs:
  url: http://swagger.io
  description: Find out more about Swagger
